networks:
  my-custom-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET}

services:
  mysql8:
    build: ./DB
    container_name: mysql8-container
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.30
    ports:
      - "3330:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

  redis:
    build: ./BN_REDIS
    container_name: bn_redis-container
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.50
    ports:
      - "6376:6376"

  yolo:
    build: ./YOLO
    container_name: flask-opencv-container
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.100
    ports:
      - "5000:5000"

  predict:
    build: ./PREDICT
    container_name: flask-opencv-container2
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.200
    ports:
      - "5002:5002"
      - "5003:5003"
      - "5004:5004"
    # volumes:
    #   - C:/video:/app/video

  auth:
    build: ./BN_AUTH
    container_name: bn_auth-container
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.40
    depends_on:
      mysql8:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8095/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "8095:8095" 

  fn:
    build: ./FN
    container_name: react-container
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.10
    depends_on:
      auth:
        condition: service_healthy
    ports:
      - "3000:80"
